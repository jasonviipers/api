generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(uuid())
  name                String
  imageUrl            String?
  email               String            @unique
  password            String
  isVerified          Boolean           @default(false)
  verifyCode          String?           @unique
  verifyCodeExpiresAt DateTime? // Token expiration
  provider            String?
  passwordResetToken  String?           @unique // Password reset token
  passwordResetAt     DateTime?
  role                Role              @default(USER)
  MessageSent         Message[]         @relation("MessageSent")
  CommunityMember     CommunityMember[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deletedAt           DateTime? // Soft delete
}

model Community {
  id              String            @id @default(uuid())
  name            String            @unique
  slug            String            @unique
  imageUrl        String?
  inviteCode      String?           @unique
  CommunityMember CommunityMember[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime? // Soft delete
}

model CommunityMember {
  id          String    @id @default(uuid())
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  role        Role      @default(MEMBER)
  message     Message[]
  status      status    @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Message {
  id                String           @id @default(uuid())
  body              String
  sender            User             @relation("MessageSent", fields: [senderId], references: [id])
  senderId          String
  CommunityMember   CommunityMember? @relation(fields: [communityMemberId], references: [id])
  communityMemberId String?
  status            MessageStatus    @default(UNREAD)
  readAt            DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
}

enum Role {
  ADMIN
  MEMBER
  MODERATOR
  USER
  GUEST
}

enum MessageStatus {
  SENT
  RECEIVED
  READ
  UNREAD
}

enum status {
  ACTIVE
  INACTIVE
  DELETED
}
